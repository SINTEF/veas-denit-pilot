# @package _global_

# example hyperparameter optimization of some experiment with Optuna:
# python train.py -m hparams_search=mnist_optuna experiment=example

defaults:
  - override /datamodule: veas_pilot
  - override /hydra/sweeper: optuna

use_inputs:
  oxygen: null
  ammonium: null
  filterpressure_1: null
  filterpressure_8: null
  turb: null
  temp: null
  methanol: null
  orto-p: null
  tunnelwater: null

datamodule:
  data_variables:
    future_covariates: ${eval:'[input for input, use_input in ${use_inputs}.items() if use_input] + ["nitrate_in"]'}

# choose metric which will be optimized by Optuna
# metrics have the naming pattern {data split}_{metric name} where metric name is the name of the function or class implementing the metric.
# make sure this is the correct name of some metric defined in:
# Torch models:     model.loss_fn or model.torch_metrics
# Non-torch models: eval.kwargs.metric
optimized_metric: "val_mse"

logger:
  mlflow:
    experiment_name: hpopt-${hydra:runtime.choices.model}-cv
  tensorboard: null

# Sets callbacks to monitor same metric as hyperparameter optimization and same higher/lower is better.
callbacks:
  early_stopping:
    monitor: "val_loss"
    patience: 10
    mode: ${eval:'"${hydra:sweeper.direction}"[:3]'}
  model_checkpoint:
    monitor: "val_loss"
    mode: ${eval:'"${hydra:sweeper.direction}"[:3]'}

validate: True
test: False
predict: False

trainer:
  max_epochs: 1000

lr_tuner: null

ckpt: "best"

plot_datasets: false

log_hyperparameters_custom:
  - "model_lags"
  - "use_inputs"

model_lags: null
max_lags: 288

eval:
  kwargs:
    start: ${max_lags}

cross_validation:
  folds:
    _target_: src.datamodules.utils.generate_cross_validation_folds
    start_time: "2023-09-18"
    end_time: "2024-01-22 03:30:00"
    min_length: "1w"
    train_fraction: 0.75
  disable_fold_logger: True

# here we define Optuna hyperparameter search
# it optimizes for value returned from function with @hydra.main decorator
# docs: https://hydra.cc/docs/next/plugins/optuna_sweeper
hydra:
  mode: "MULTIRUN" # set hydra to multirun by default if this config is attached

  sweeper:
    _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper

    # storage URL to persist optimization results
    # for example, you can use SQLite if you set 'sqlite:///example.db'
    # not possible to set to hydra.output_dir because db is created before output_dir
    storage: "sqlite:///${paths.log_dir}optuna/hyperopt.db"

    # number of parallel workers
    n_jobs: 1

    # 'minimize' or 'maximize' the objective
    direction: "minimize"

    # total number of runs that will be executed
    n_trials: 250

    study_name: ???

    sampler:
      _target_: optuna.samplers.TPESampler
      seed: 1234
      n_startup_trials: 50 # number of random sampling runs before optimization starts
